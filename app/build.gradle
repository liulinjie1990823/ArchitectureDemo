apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt' // kapt 插件
apply plugin: 'walle'
//apply plugin: 'task-time'

android {
    compileSdkVersion build_versions.compile
    buildToolsVersion build_versions.build_tools
    defaultConfig {
        applicationId "com.llj.architecturedemo"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk

        versionCode build_versions.version_code
        versionName build_versions.version_name

        resConfigs "en", "xxhdpi"

        ndk {
            abiFilters "armeabi"
        }
        dataBinding {
            enabled = true
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString(),
                             moduleName           : project.getName()]
            }
        }
    }
    signingConfigs {
        release {
            storeFile file("../itotemHunbohui.keystore")
            storePassword "itotem"
            keyAlias "itotemapp"
            keyPassword "itotem"
            v2SigningEnabled true
        }
    }
    flavorDimensions "free"

    productFlavors {
//        wm {
//            dimension "free"
//        }
//        mt {
//            dimension "free"
//        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            matchingFallbacks = ['debug', 'release']
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.alwaysUpdateBuildId = false
        }
        beta {
            signingConfig signingConfigs.release
            matchingFallbacks = ['debug', 'release']
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.release
            matchingFallbacks = ['debug', 'release']
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        def dirs = ['p_app', 'p_widget']
        main {
            manifest.srcFile 'src/p_app/main/AndroidManifest.xml'
            dirs.each { dir ->
                java.srcDir("src/${dir}/main/java")
                res.srcDir("src/${dir}/main/res")
            }
        }

//        wm {
//            dirs.each { dir ->
//                java.srcDir("src/${dir}/wm/java")
//                res.srcDir("src/${dir}/wm/res")
//            }
//        }
//        mt {
//            dirs.each { dir ->
//                java.srcDir("src/${dir}/mt/java")
//                res.srcDir("src/${dir}/mt/res")
//            }
//        }
    }

    compileOptions {
        targetCompatibility build_versions.compile_jdk
        sourceCompatibility build_versions.compile_jdk
    }

    lintOptions {
        abortOnError false
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "v${defaultConfig.versionName}_${variant.name}_${releaseTime()}.apk"
                outputFileName = fileName
            }
        }
    }
    //停用 PNG 处理
    aaptOptions {
        cruncherEnabled false
    }

    //DEX 构建特性
    dexOptions {
        preDexLibraries true
        maxProcessCount 8
        // Instead of setting the heap size for the DEX process, increase Gradle's
        // heap size to enable dex-in-process. To learm more, read the next section.
        // javaMaxHeapSize "2048m"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api project(':component-service')
    api project(':lib-universalAdapter')

    implementation deps.support.app_compat
    implementation deps.support.recyclerview
    //约束布局
    implementation deps.constraint_layout
    // Architecture components
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    implementation deps.lifecycle.java8
    kapt deps.lifecycle.compiler
    //db
    implementation deps.room.runtime
    kapt deps.room.compiler
    //net
    implementation deps.retrofit2.retrofit
    implementation deps.okhttp_logging_interceptor
    //事件
    implementation deps.eventbus
    //数据解析
    implementation deps.gson
    //butterknife
    implementation deps.butterknife.runtime
    kapt deps.butterknife.compiler
    //跳转路由
    kapt deps.arouter.compiler
    //刷新
    implementation deps.smartrefresh.SmartRefreshLayout
    //dagger编译
    api 'com.google.dagger:dagger:2.16'
    kapt 'com.google.dagger:dagger-compiler:2.16'
    api 'com.google.dagger:dagger-android:2.16'
    api 'com.google.dagger:dagger-android-support:2.16' // if you use the support libraries
    kapt 'com.google.dagger:dagger-android-processor:2.16'

    implementation 'com.meituan.android.walle:library:1.1.6'
    implementation deps.kotlin_stdlib_jdk8

    kapt "com.android.databinding:compiler:3.1.3"
}

walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}_${channel}_${flavorName}${buildType}_v${versionName}_${versionCode}-${buildTime}.apk'
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}

kapt {
    arguments {
        arg("moduleName", project.getName())
    }
}


task zipChannels(type: Zip) {
    println 'zipChannels'
    from 'build/outputs/channels'    //需要打包的文件夹内容
//    into 'build/outputs/channels'  //zip包里面的的文件夹路径
    baseName "$project.name-channels"
    extension 'zip'
    destinationDir file("$buildDir/outputs")  //输出路径
//    dependsOn 'assembleReleaseChannels'
}

task taskX {
    doLast {
        println releaseTime()
    }
}
task taskY {
    doLast {
        println 'taskY'
    }
}
taskY.mustRunAfter taskX



