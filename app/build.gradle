//打渠道包
apply plugin: 'walle'

walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}_${channel}_${flavorName}${buildType}_v${versionName}_${versionCode}-${buildTime}.apk'
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}

//方法耗时统计
if (useMethodTrace) {
    apply plugin: "cn.cxzheng.asmtraceman"
    traceMan {
        open = true //这里如果设置为false,则会关闭插桩
        logTraceInfo = false //这里设置为true时可以在log日志里看到所有被插桩的类和方法
        traceConfigFile = "${project.projectDir}/traceconfig.txt"
    }
}

//统计方法数
if (useDexcount) {
    apply plugin: 'com.getkeepsafe.dexcount'
}

//使用okbuck编译
if (useoOkbuck) {
    apply plugin: 'com.uber.okbuck'

    okbuck {
        buildToolVersion = "28.0.3"
        target = "android-28"
        linearAllocHardLimit = [
                app: 16 * 1024 * 1024
        ]
        primaryDexPatterns = [
                app: [
                        '^com/uber/okbuck/example/AppShell^',
                        '^com/uber/okbuck/example/BuildConfig^',
                        '^android/support/multidex/',
                        '^com/facebook/buck/android/support/exopackage/',
                        '^com/github/promeg/xlog_android/lib/XLogConfig^',
                        '^com/squareup/leakcanary/LeakCanary^',
                ]
        ]
        exopackage = [
                appDebug: true
        ]
        appLibDependencies = [
                'appProd': [
                        'buck-android-support',
                        'com.android.support:multidex',
                        'libraries/javalibrary:main',
                        'libraries/common:paidRelease',
                ],
                'appDev' : [
                        'buck-android-support',
                        'com.android.support:multidex',
                        'libraries/javalibrary:main',
                        'libraries/common:freeDebug',
                ]
        ]
        annotationProcessors = [
                "local-apt-dependency": ['com.okbuck.apt.ExampleProcessor']
        ]
        buckProjects = project.subprojects
        extraBuckOpts = [
                'appDebug': [
                        "android_binary": ["trim_resource_ids = True"]
                ]
        ]

        wrapper {
            repo = 'https://github.com/facebook/buck.git'
        }

//    experimental {
//        transform = true
//    }
    }
}


android {
    compileSdkVersion build_versions.compileSdkVersion
    buildToolsVersion build_versions.buildToolsVersion
    defaultConfig {
        applicationId build_versions.applicationId
        minSdkVersion build_versions.minSdkVersion
        targetSdkVersion build_versions.targetSdkVersion
        multiDexEnabled true

        versionCode build_versions.versionCode
        versionName build_versions.versionName

        dataBinding { enabled = true }

    }
    signingConfigs {
        release {
            storeFile file("../itotemHunbohui.keystore")
            storePassword "itotem"
            keyAlias "itotemapp"
            keyPassword "itotem"
        }
    }
    flavorDimensions "free"

    productFlavors {
//        wm { dimension "free" }
//        mt { dimension "free" }
    }

    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            shrinkResources false
            signingConfig signingConfigs.release
        }
        beta {
            minifyEnabled false
            useProguard false
            shrinkResources false
            signingConfig signingConfigs.release
        }
        release {
            debuggable false
            minifyEnabled true
            useProguard true
            shrinkResources true
            signingConfig signingConfigs.release
        }
    }
    buildTypes.all { type ->
        type.matchingFallbacks = ['debug']
        type.proguardFiles = [getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro']
    }

    sourceSets {
        def dirs = ['p_app', 'p_widget', 'p_loading', 'p_mine', 'p_login']
        main {
            manifest.srcFile 'src/p_app/main/AndroidManifest.xml'
            dirs.each { dir ->
                java.srcDir("src/${dir}/main/java")
                res.srcDir("src/${dir}/main/res")
                assets.srcDirs("src/${dir}/main/assets")
            }
        }
//        wm {
//            dirs.each { dir ->
//                java.srcDir("src/${dir}/wm/java")
//                res.srcDir("src/${dir}/wm/res")
//            }
//        }
//        mt {
//            dirs.each { dir ->
//                java.srcDir("src/${dir}/mt/java")
//                res.srcDir("src/${dir}/mt/res")
//            }
//        }

    }

    //buildFeatures {
    //    // Enables Jetpack Compose for this module
    //    compose true
    //}

    lintOptions {
        abortOnError false
        ignoreWarnings true
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                //outputFileName = "v${variant.versionName}_${variant.value}_${releaseTime()}.apk"
                outputFileName = getApkName(variant.versionName, variant.name)
            }
        }
    }
    //停用 PNG 处理
    aaptOptions {
        cruncherEnabled false
    }

    //DEX 构建特性
    dexOptions {
        preDexLibraries true
        maxProcessCount 8
        // Instead of setting the heap size for the DEX process, increase Gradle's
        // heap size to enable dex-in-process. To learm more, read the next section.
        // javaMaxHeapSize "2048m"
    }
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'META-INF/androidx.core_core.version'
        exclude 'META-INF/androidx.versionedparcelable_versionedparcelable.version'
    }
}

//测试
//apply from: rootProject.file('gradle/test.gradle')
//打包任务
apply from: rootProject.file('gradle/zipChannel.gradle')
apply from: rootProject.file('gradle/git.gradle')
apply plugin: 'kotlin-android'

//打包上传pgy
if (useApkUploadPlugin) {
    //使用插件
    apply plugin: 'com.llj.plugin.upload.apkUploadPlugin'

    upload {
        testDingDing = false
        dingTalkAccessToken = dingTalkDebugAccessToken
        gitLog = "git log --pretty=format:%cn--%cd--%s --date=local --after=\"yesterday\" --grep=fix"

        buildTypes {
            debug {
                pgyApiKey = pgyDebugApiKey
                pgyUserKey = pgyDebugUserKey
                pgyAppKey = ""
                password = "123456"
                installType = "2"
            }
            beta {
                pgyApiKey = pgyBetaApiKey
                pgyUserKey = pgyBetaUserKey
                pgyAppKey = pgyBetaAppKey
                password = "123456"
                installType = "2"
            }
            release {
                pgyApiKey = pgyReleaseApiKey
                pgyUserKey = pgyReleaseUserKey
                pgyAppKey = pgyReleaseAppKey
                password = "123456"
                installType = "2"
            }
        }
    }
}


//repositories {
//    maven { url '../flutter_ui/build/host/outputs/repo' }
//    maven { url '../flutter_main/build/host/outputs/repo' }
//    maven { url '../flutter_setting/build/host/outputs/repo' }
//}

dependencies {
//    implementation project(':flutter')
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api project(':lib-jni-test')
    api project(':lib-opengl')
    api project(':lib-opencv')
    api project(':lib-jpeg-turbo-utils')
    api project(':lib-record')
    api project(':lib-kodo')
    //    api project(':lib-player')
    implementation deps.multidex
    implementation deps.badgeview
    implementation deps.viewpager2
    if (useComponent) {
        addComponent 'app-login'
        addComponent 'app-mine'
        addComponent 'app-setting'
    } else {
        api project(':app-login')
        api project(':app-mine')
        api project(':app-setting')
    }
    if (useMaven) {
        kapt deps.component_compiler
    } else {
        kapt project(':lib-component-compiler')
        kapt project(':lib-jump-compiler')
    }
    implementation 'com.github.Yuphee:RewardLayout:1.0.5.8'

    //svg
//    implementation 'com.pixplicity.sharp:library:1.1.3@aar'

    //    implementation 'com.llj.flutter.flutter_ui:flutter_release:1.0@aar'
    //    implementation 'com.llj.flutter.flutter_setting2:flutter_release:1.0@aar'
//    implementation 'com.llj.flutter.flutter_module:flutter_release:1.0@aar'

    if (useFlutterSrc) {
        implementation project(':flutter')
        implementation project(':flutter_boost')
    } else {
    }

    implementation 'com.github.florent37:shapeofview:1.4.7'
    implementation 'com.arthenica:mobile-ffmpeg-full:4.3.2'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

}


//apply plugin: 'buildfilter'
//
//buildClassFilter {
//    jarExcludes = [ 'com/netease/nimlib/R.class','com/netease/nimlib/push/R.class' ]
//}
