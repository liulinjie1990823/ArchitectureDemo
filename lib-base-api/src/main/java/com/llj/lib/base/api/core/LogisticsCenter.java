package com.llj.lib.base.api.core;

import android.content.Context;

import com.llj.lib.base.api.JumpHelp;
import com.llj.lib.base.api.template.IRouteGroup;
import com.llj.lib.base.api.utils.ClassUtils;
import com.llj.lib.base.api.utils.PackageUtils;

import java.util.HashSet;
import java.util.Set;

import static com.llj.lib.base.api.JumpHelp.logger;
import static com.llj.lib.base.api.utils.Consts.DOT;
import static com.llj.lib.base.api.utils.Consts.JUMP_SP_CACHE_KEY;
import static com.llj.lib.base.api.utils.Consts.JUMP_SP_KEY_MAP;
import static com.llj.lib.base.api.utils.Consts.ROUTE_ROOT_PACKAGE;
import static com.llj.lib.base.api.utils.Consts.SDK_NAME;
import static com.llj.lib.base.api.utils.Consts.SEPARATOR;
import static com.llj.lib.base.api.utils.Consts.TAG;

/**
 * ArchitectureDemo.
 * describe:
 *
 * @author llj
 * @date 2019-06-16
 */
public class LogisticsCenter {

    private static Context mContext;
    private static boolean registerByPlugin;

    public synchronized static void init(Context context) {
        mContext = context;

        try {
            long startInit = System.currentTimeMillis();
            if (registerByPlugin) {
            } else {
                Set<String> routerMap;

                // It will rebuild router map every times when debuggable.
                if (JumpHelp.debuggable() || PackageUtils.isNewVersion(context)) {
                    logger.info(TAG, "Run with debug mode or new install, rebuild jump map.");

                    // These class was generated by arouter-compiler.
                    routerMap = ClassUtils.getFileNameByPackageName(context, ROUTE_ROOT_PACKAGE);
                    if (!routerMap.isEmpty()) {
                        context.getSharedPreferences(JUMP_SP_CACHE_KEY, Context.MODE_PRIVATE).edit().putStringSet(JUMP_SP_KEY_MAP, routerMap).apply();
                    }

                    PackageUtils.updateVersion(context);    // Save new version name when router map update finishes.
                } else {
                    logger.info(TAG, "Load jump map from cache.");
                    routerMap = new HashSet<>(context.getSharedPreferences(JUMP_SP_CACHE_KEY, Context.MODE_PRIVATE).getStringSet(JUMP_SP_KEY_MAP, new HashSet<>()));
                }

                logger.info(TAG, "Find jump map finished, map size = " + routerMap.size() + ", cost " + (System.currentTimeMillis() - startInit) + " ms.");
                startInit = System.currentTimeMillis();

                for (String className : routerMap) {
                    if (className.startsWith(ROUTE_ROOT_PACKAGE + DOT + SDK_NAME + SEPARATOR)) {
                        // This one of root elements, load root.
                        try {
                            ((IRouteGroup) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.sMap);
                        } catch (Exception e) {
                        }
                    }
                }
            }
        } catch (Exception e) {

        }
    }
}
