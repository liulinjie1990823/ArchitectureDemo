/**
 * 工程类库共用相关配置
 */

subprojects {
    if (it.name == 'app'
            || it.name.startsWith('module-')) {

        if (it.name.startsWith('module-java')) {
            return
        }
        apply from: rootProject.file('gradle/pgy.gradle')
        if (useComponent) {
            //使用组件
            if (it.name == 'app') {
                ext.mainApp = true
            } else {
//            ext.alwaysLib = true
            }
            apply from: rootProject.file('cc-settings-2.gradle')

        } else {
            //不使用组件
            if (it.name == 'app') {
                apply plugin: 'com.android.application'
            } else {
                apply plugin: 'com.android.library'
            }
        }
        //app和module都生成R2文件，因为module要使用R2，切换为application的时候不用替换R2为R
        apply plugin: 'com.jakewharton.butterknife'
        apply plugin: 'kotlin-android'
        apply plugin: 'kotlin-kapt'

        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
        def isApplication = it.pluginManager.hasPlugin("com.android.application")
        //android
        if (it.name != 'app') {
            android {
                compileSdkVersion build_versions.compileSdkVersion
                buildToolsVersion build_versions.buildToolsVersion

                defaultConfig {
                    if (isApplication) {
                        applicationId build_versions.applicationId
                    }
                    minSdkVersion build_versions.minSdkVersion
                    targetSdkVersion build_versions.targetSdkVersion

                    versionCode build_versions.versionCode
                    versionName build_versions.versionName

                    resConfigs "en", "xxhdpi"

                    ndk { abiFilters "armeabi-v7a"  }

                    manifestPlaceholders = [qq_id: "1103566659"]
                }

                buildTypes {
                    debug {
                    }
                }
                buildTypes.all { type ->
                    type.matchingFallbacks = ['debug']
                    type.proguardFiles = [getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro']
                }
                compileOptions {
                    targetCompatibility build_versions.compileJdkVersion
                    sourceCompatibility build_versions.compileJdkVersion
                }
                lintOptions {
                    abortOnError false
                }
                packagingOptions {
                    exclude 'META-INF/proguard/androidx-annotations.pro'
                    exclude 'META-INF/androidx.core_core.version'
                    exclude 'META-INF/androidx.versionedparcelable_versionedparcelable.version'
                }
            }
        }

        dependencies {
            implementation fileTree(include: ['*.jar'], dir: 'libs')
            api project(':component-service')

            kapt deps.dagger_compiler
            kapt deps.dagger_android_support_compiler

            //lifecycle
            kapt deps.lifecycle_compiler
            //db
            kapt deps.room_compiler
            //butterknife
            kapt deps.butterknife_compiler
            //跳转路由
            kapt deps.arouter_compiler
        }
    }
}
