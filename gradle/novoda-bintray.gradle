// load properties
Properties localProperties = new Properties()
Properties properties = new Properties()

File localPropertiesFile = project.parent.file("local.properties")
if (localPropertiesFile.exists()) {
    localProperties.load(localPropertiesFile.newDataInputStream())
} else {
    println("local.properties not found")
}

File projectPropertiesFile = project.file("project.properties")
if (projectPropertiesFile.exists()) {
    properties.load(projectPropertiesFile.newDataInputStream())
} else {
    println("project.properties not found")
}

// read properties
def projectUserOrg = properties.getProperty("project.userOrg")
def projectRepo = properties.getProperty("project.repo")

def projectGroupId = properties.getProperty("project.groupId")
def projectArtifactId = properties.getProperty("project.artifactId")
def projectVersionName = properties.getProperty("project.versionName")

def projectName = properties.getProperty("project.name")
def projectPackaging = properties.getProperty("project.packaging")
def projectDescription = properties.getProperty("project.description")
def webSiteUrl = properties.getProperty("project.webSiteUrl")
def issueUrl = properties.getProperty("project.issueTrackerUrl")
def vscUrl = properties.getProperty("project.vscUrl")
def projectLicense = properties.getProperty("project.license")

def developerId = properties.getProperty("developer.id")
def developerName = properties.getProperty("developer.name")
def developerEmail = properties.getProperty("developer.email")


def javadocName = properties.getProperty("javadoc.name")
def isDryRun = properties.getProperty("dryRun") == "true"

def bintrayApiUser = localProperties.getProperty("bintray.user")
def bintrayApikey = localProperties.getProperty("bintray.apikey")

if (projectUserOrg != null) {
// 0.9.2版本在gradle6.0上有bug

    println("project.name:" + project.name)

    //https://github.com/novoda/bintray-release
    //用于发布本地或远程自定义仓库，MavenLocal，bintray.com
    //会增加publishing和upload组任务

    //增加publishing组
    //bintrayUpload
    //generateMetadataFileForBetaPublication
    //generateMetadataFileForDebugPublication
    //generateMetadataFileForReleasePublication
    //generatePomFileForBetaPublication
    //generatePomFileForDebugPublication
    //generatePomFileForReleasePublication
    //publish
    //publishBetaPublicationToMavenLocal
    //publishDebugPublicationToMavenLocal
    //publishReleasePublicationToMavenLocal
    //publishToMavenLocal

    //增加upload组
    //uploadArchives


    //publishToMavenLocal打本地包
    //上传bintray.com使用bintrayUpload任务

    apply plugin: 'com.novoda.bintray-release'


    //定义文档task
    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        //文档
        task androidJavadocs(type: Javadoc) {
            failOnError false
            source = android.sourceSets.main.java.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

            if (project.getPlugins().hasPlugin('com.android.library')) {
                project.android.libraryVariants.all { variant ->
                    if (variant.name == 'release') {
                        owner.classpath += variant.javaCompileProvider.get().classpath
                    }
                }
            }
        }
        //文档
        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            from androidJavadocs.destinationDir
            classifier = 'javadoc'
        }
        //源码
        task androidSourcesJar(type: Jar) {
            from android.sourceSets.main.java.source
            classifier = 'sources'
        }
    } else {
        //文档
        task javadocJar(type: Jar, dependsOn: javadoc) {
            from javadoc.destinationDir
            classifier = 'javadoc'
        }
        //源码
        task sourcesJar(type: Jar, dependsOn: classes) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }
    }

//略过Javadoc中的编码问题
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                failOnError false
                excludes = ['**/*.kt']
                options.addStringOption('Xdoclint:none', '-quiet')
                options.addStringOption('encoding', 'UTF-8')
                options.addStringOption('charSet', 'UTF-8')
            }
        }
    }

    publishing {

        //设置发布仓库
        repositories {
            maven {
                //可以使本地路径，也可以是远程仓库
                url = "../repo"
                //指定要上传的maven私服仓库
//            url = "http://jenkins.maxrocky.com:8080/maven/content/repositories/thirdparty/"
                //远程的仓库名称，一般url就指定了仓库名称
                name = "localRepo"

                //认证用户和密码
//            credentials {
//                username 'admin'
//                password 'maxrocky5721'
//            }
            }
        }
    }

    publish {
        userOrg = projectUserOrg
        repoName = projectRepo
        groupId = projectGroupId
        artifactId = projectArtifactId
        publishVersion = projectVersionName
        desc = projectDescription
        website = webSiteUrl
        repository = vscUrl
        issueTracker = issueUrl
        bintrayUser = bintrayApiUser
        bintrayKey = bintrayApikey
        dryRun = isDryRun
    }
}
