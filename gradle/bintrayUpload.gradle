apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// load properties
Properties localProperties = new Properties()
Properties properties = new Properties()

File localPropertiesFile = project.parent.file("local.properties")
if (localPropertiesFile.exists()) {
    localProperties.load(localPropertiesFile.newDataInputStream())
} else {
    println("local.properties not found")
}

File projectPropertiesFile = project.file("project.properties")
if (projectPropertiesFile.exists()) {
    properties.load(projectPropertiesFile.newDataInputStream())
} else {
    println("project.properties not found")
}

// read properties
def projectUserOrg = properties.getProperty("project.userOrg")
def projectRepo = properties.getProperty("project.repo")

def projectGroupId = properties.getProperty("project.groupId")
def projectArtifactId = properties.getProperty("project.artifactId")
def projectVersionName = properties.getProperty("project.versionName")

def projectName = properties.getProperty("project.name")
def projectPackaging = properties.getProperty("project.packaging")
def projectDescription = properties.getProperty("project.description")
def webSiteUrl = properties.getProperty("project.webSiteUrl")
def issueUrl = properties.getProperty("project.issueTrackerUrl")
def vscUrl = properties.getProperty("project.vscUrl")
def projectLicense = properties.getProperty("project.license")

def developerId = properties.getProperty("developer.id")
def developerName = properties.getProperty("developer.name")
def developerEmail = properties.getProperty("developer.email")

def bintrayUser = localProperties.getProperty("bintray.user")
def bintrayApikey = localProperties.getProperty("bintray.apikey")

def javadocName = properties.getProperty("javadoc.name")

group = projectGroupId
version = projectVersionName

// This generates POM.xml with proper parameters
install {
    repositories.mavenInstaller {

        pom.groupId = projectGroupId
        pom.artifactId = projectArtifactId
        pom.version = projectVersionName

        pom.project {
            name = projectName
            packaging = projectPackaging
            description = projectDescription
            url = webSiteUrl

            scm {
                connection = vscUrl
                developerConnection = vscUrl
                url = webSiteUrl
            }

            licenses {
                license {
                    name = 'The Apache Software License, Version 2.0'
                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }

            developers {
                developer {
                    id = developerId
                    name = developerName
                    email = developerEmail
                }
            }
        }
    }
}

//定义文档task
if (project.getPlugins().hasPlugin('com.android.application') ||
        project.getPlugins().hasPlugin('com.android.library')) {
    //文档
    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
    //文档
    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        from androidJavadocs.destinationDir
        classifier = 'javadoc'
    }
    //源码
    task androidSourcesJar(type: Jar) {
        from android.sourceSets.main.java.source
        classifier = 'sources'
    }
} else {
    //文档
    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }
    //源码
    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
}

//略过Javadoc中的编码问题
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            failOnError false
            excludes = ['**/*.kt']
            options.addStringOption('Xdoclint:none', '-quiet')
            options.addStringOption('encoding', 'UTF-8')
            options.addStringOption('charSet', 'UTF-8')
        }
    }
}

//上传到jcenter所需要的源码文件
artifacts {
    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {

        archives androidJavadocsJar
        archives androidSourcesJar

    } else {

        archives javadocJar
        archives sourcesJar
    }
}

// bintray configuration
bintray {
    user = bintrayUser
    key = bintrayApikey
    configurations = ['archives']
    pkg {
        userOrg = projectUserOrg
        repo = projectRepo
        name = projectArtifactId
        version projectVersionName
        desc = projectDescription
        websiteUrl = webSiteUrl
        issueTrackerUrl = issueUrl
        vcsUrl = vscUrl
        licenses = [projectLicense]
        publish = true
    }
}
