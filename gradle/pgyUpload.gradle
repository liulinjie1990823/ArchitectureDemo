buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
        classpath 'org.apache.httpcomponents:httpmime:4.5.6'
    }
}

import groovy.json.internal.LazyMap
import groovyx.net.http.HTTPBuilder
import org.apache.http.entity.mime.MultipartEntity
import org.apache.http.entity.mime.content.FileBody
import org.apache.http.entity.mime.content.StringBody
import org.apache.http.protocol.HTTP

import java.nio.charset.Charset

import static groovyx.net.http.ContentType.JSON
import static groovyx.net.http.Method.POST

ApkUploadExtensions upload = project.extensions.create("upload", ApkUploadExtensions, project)


android {
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            String variantName = variant.name.capitalize()

            def apkFile = variant.outputs[0].outputFile.getAbsolutePath()
            println("apkFile:${apkFile}")

            //获得buildType
            BuildTypeExtensions buildType = upload.buildTypes.findByName(variant.name)

            if (buildType != null) {

                println("buildType:${buildType.toString()}")

                //上传本地apk
                def uploadLocalApkToPgy = project.task("uploadLocal${variantName}ToPgy").doFirst {
                    project.ext.uploadPgyApk(project, apkFile, upload, buildType, variantName)
                }
                uploadLocalApkToPgy.setGroup("uploadPgy")

                //上传apk,apk会重新生成
                def uploadApkToPgy = project.task("assemble${variantName}ToPgy").doFirst {
                    project.ext.uploadPgyApk(project, apkFile, upload, buildType, variantName)
                }
                uploadApkToPgy.setGroup("uploadPgy")
                uploadApkToPgy.dependsOn(project.tasks.getByName("assemble${variantName}"))
            }
        }
    }
}

def uploadPgyApk(Project project, String apkFile, ApkUploadExtensions upload, BuildTypeExtensions buildType, String variantName) {
    println "----------------------------------"
    println("apiKey:" + buildType.pgyApiKey)
    println("userKey:" + buildType.pgyUserKey)
    println("dingTalkAccessToken:" + upload.dingTalkAccessToken)
    println "----------------------------------"
    def desc
    if (project.hasProperty("desc")) {
        desc = project.properties.get("desc")
    } else {
        desc = "no desc"
    }
    def http = new HTTPBuilder("https://qiniu-storage.pgyer.com/")
    http.request(POST, JSON) { req ->
        uri.path = "/apiv1/app/upload"
        MultipartEntity entity = new MultipartEntity()
        entity.addPart("file", new FileBody(new File(apkFile)))
        entity.addPart("_api_key", new StringBody(buildType.pgyApiKey))
        entity.addPart("uKey", new StringBody(buildType.pgyUserKey))
        entity.addPart("updateDescription", new StringBody(desc, Charset.forName(HTTP.UTF_8)))
        req.entity = entity
        requestContentType = 'multipart/form-data'
        response.success = { resp, json ->
            assert resp.status == 200
            if (json.code == 0) {
                println "pgy upload success"
                println("json.data:" + json.data.toString())

                noticeDingTalk(project, upload, variantName, json.data)
            } else {
                println json.message
            }
        }
        response.failure = { resp ->
            println "pgyer upload fail, ${resp.status}"
        }
    }
}

def noticeDingTalk(Project project, ApkUploadExtensions upload, String variantName, LazyMap data) {
    println "----------------------------------"
    try {
        def http = new HTTPBuilder("https://oapi.dingtalk.com/")
        http.request(POST, JSON) { req ->
            uri.path = "/robot/send"
            uri.query = ["access_token": upload.dingTalkAccessToken]
            body = "{\n" +
                    "    \"actionCard\": {\n" +
                    "        \"title\": \"Android：${data.appName}\", \n" +
                    "        \"text\": \"![screenshot](${data.appQRCodeURL}) \\n #### **Android**：${data.appName} \\n\\n - build版本：${variantName} \\n - 版本信息：${data.appVersion} \\n - 应用大小：${project.ext.getPrintSize(Long.valueOf(data.appFileSize))} \\n - 更新时间：${data.appUpdated} \\n - 更新内容：${data.appUpdateDescription}\", \n" +
                    "        \"hideAvatar\": \"0\", \n" +
                    "        \"btnOrientation\": \"0\", \n" +
                    "        \"singleTitle\" : \"点击下载最新应用包\",\n" +
                    "        \"singleURL\" : \"https://www.pgyer.com/${data.appShortcutUrl}\"\n" +
                    "    }, \n" +
                    "    \"msgtype\": \"actionCard\"\n" +
                    "}"
            response.success = { resp, json ->
                assert resp.status == 200
                if (json.errcode == 0) {
                    println "ding message send success"
                } else {
                    println json.errmsg
                }
            }
            response.failure = { resp ->
                println "ding message send fail, ${resp.status}"
            }
        }
    } catch (Exception e) {
        println e.toString()
    }

}

def getPrintSize(long size) {
    //如果字节数少于1024，则直接以B为单位，否则先除于1024，后3位因太少无意义
    if (size < 1024) {
        return String.valueOf(size) + "B";
    } else {
        size = size / 1024;
    }
    //如果原字节数除于1024之后，少于1024，则可以直接以KB作为单位
    //因为还没有到达要使用另一个单位的时候
    //接下去以此类推
    if (size < 1024) {
        return String.valueOf(size) + "KB";
    } else {
        size = size / 1024;
    }
    if (size < 1024) {
        //因为如果以MB为单位的话，要保留最后1位小数，
        //因此，把此数乘以100之后再取余
        size = size * 100;
        return String.valueOf((size / 100)) + "." + String.valueOf((size % 100)) + "MB";
    } else {
        //否则如果要以GB为单位的，先除于1024再作同样的处理
        size = size * 100 / 1024;
        return String.valueOf((size / 100)) + "." + String.valueOf((size % 100)) + "GB";
    }
}

ext {
    uploadPgyApk = this.&uploadPgyApk
    noticeDingTalk = this.&noticeDingTalk
    getPrintSize = this.&getPrintSize
}

class BuildTypeExtensions {
    String name
    String pgyApiKey
    String pgyUserKey

    public BuildTypeExtensions(String name) {
        this.name = name
        println "BuildTypeExtensions name = " + name
    }


    @Override
    public String toString() {
        return "BuildTypeExtensions{" +
                "name='" + name + '\'' +
                ", pgyApiKey='" + pgyApiKey + '\'' +
                ", pgyUserKey='" + pgyUserKey + '\'' +
                '}';
    }
}

class ApkUploadExtensions {
    String dingTalkAccessToken
    NamedDomainObjectContainer<BuildTypeExtensions> buildTypes

    ApkUploadExtensions(Project project) {
        buildTypes = project.container(BuildTypeExtensions)
    }

    //创建内部Extension，名称为方法名 inner
    void buildTypes(Action<? super NamedDomainObjectContainer<BuildTypeExtensions>> action) {
        action.execute(buildTypes)
    }
}

