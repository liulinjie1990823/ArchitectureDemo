/**
 * 工程类库共用相关配置
 */

//限制在跟目录导入
if (project.name != project.rootProject.name) {
    return
}

println("Custome Configure configLibrary.gradle")


subprojects {
    //配置类库公用的配置
    if (it.name.startsWith('lib-') || (it.name.startsWith('lib_')) || (it.name.startsWith('plugin-'))) {
        if (it.name.startsWith('plugin-code-inject')
                || it.name.startsWith('plugin-upload')
        ) {
            apply plugin: 'groovy'
            apply from: rootProject.file('gradle/novoda-bintray.gradle')
//            apply from: rootProject.file('gradle/maven-publish.gradle')

        } else if (it.name.startsWith('lib-component-annotation')
                || it.name.startsWith('lib-component-compiler')
                || it.name.startsWith('lib-jump-annotation')
                || it.name.startsWith('lib-jump-compiler')
                || it.name.startsWith('lib-base-compiler')
                || it.name.startsWith('lib-mvp-compiler')
                || it.name.startsWith('lib-mvp-annotation')
        ) {

            apply plugin: 'java-library'

            sourceCompatibility = "1.8"
            targetCompatibility = "1.8"

        } else {
            //
            apply plugin: 'com.android.library'

            android.compileOptions {
                targetCompatibility build_versions.compileJdkVersion
                sourceCompatibility build_versions.compileJdkVersion
            }

            android {
                compileSdkVersion build_versions.compileSdkVersion
                buildToolsVersion build_versions.buildToolsVersion

                defaultConfig {
                    minSdkVersion build_versions.minSdkVersion
                    targetSdkVersion build_versions.targetSdkVersion
                }

                buildTypes {
                    debug {}
                    beta {}
                    release {}
                }
                buildTypes.all { type ->
                    type.matchingFallbacks = ['debug']
                    type.minifyEnabled = false
                    type.proguardFiles = [getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro']
                }

                lintOptions {
                    abortOnError false
                }
                packagingOptions {
                    exclude 'META-INF/proguard/androidx-annotations.pro'
                    exclude 'META-INF/androidx.core_core.version'
                    exclude 'META-INF/androidx.versionedparcelable_versionedparcelable.version'
                }
            }
            dependencies {
                implementation fileTree(dir: 'libs', include: ['*.jar'])
                implementation deps.annotations
                implementation deps.recyclerview
                implementation deps.appcompat
            }
        }
        if (useOld) {
            //打包本地
            apply from: rootProject.file('gradle/uploadArchives.gradle')
            //上传bintray
            apply from: rootProject.file('gradle/bintrayUpload.gradle')
        }
    }
}
