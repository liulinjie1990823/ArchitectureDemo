//限制只能在跟目录导入
if (project.name != project.rootProject.name) {
    return
}

println("Custome Configure (init.gradle)")

//先加载根目录下的local.properties文件
Properties properties = new Properties()
try {
    //获取根目录下的local.properties文件
    def localFile = project.rootProject.file("local.properties")
    if (localFile != null && localFile.exists()) {
        properties.load(localFile.newDataInputStream())
    }
} catch (Exception ignored) {
    println("local.properties not found")
}

//将根目录下的local.properties文件的属性赋值给根project的ext属性

//获取编译任务的buildType
ext.buildTypeDebug = false
if (gradle.startParameter.taskNames.size() != 0) {
    ext.buildTypeDebug = gradle.startParameter.taskNames.get(0).contains("Debug")
}
println("ext.buildTypeDebug:" + ext.buildTypeDebug)

ext.applicationId = properties.getProperty("applicationId")

ext.useComponent = properties.getProperty("useComponent") == "true"
ext.useMaven = properties.getProperty("useMaven") == "true"
ext.useDexcount = properties.getProperty("useDexcount") == "true"
ext.useAspectjx = properties.getProperty("useAspectjx") == "true"
ext.useCodeInject = properties.getProperty("useCodeInject") == "true"
ext.useApkUploadPlugin = properties.getProperty("useApkUploadPlugin") == "true"
ext.useDoraemonkit = properties.getProperty("useDoraemonkit") == "true"
ext.useMatrix = properties.getProperty("useMatrix") == "true"
ext.useOld = properties.getProperty("useOld") == "true"
ext.useNew = properties.getProperty("useNew") == "true"
ext.useMethodTrace = properties.getProperty("useMethodTrace") == "true"
ext.useOkbuck = properties.getProperty("useOkbuck") == "true"
ext.useAndroidDevMetrics = properties.getProperty("useAndroidDevMetrics") == "true"
ext.useFlutterSrc = properties.getProperty("useFlutterSrc") == "true"

//蒲公英相关秘钥
ext.pgyDebugApiKey = properties.getProperty("pgyDebugApiKey")
ext.pgyDebugUserKey = properties.getProperty("pgyDebugUserKey")
ext.pgyDebugAppKey = properties.getProperty("pgyDebugAppKey")

ext.pgyBetaApiKey = properties.getProperty("pgyBetaApiKey")
ext.pgyBetaUserKey = properties.getProperty("pgyBetaUserKey")
ext.pgyBetaAppKey = properties.getProperty("pgyBetaAppKey")

ext.pgyReleaseApiKey = properties.getProperty("pgyReleaseApiKey")
ext.pgyReleaseUserKey = properties.getProperty("pgyReleaseUserKey")
ext.pgyReleaseAppKey = properties.getProperty("pgyReleaseAppKey")

ext.pgyUploadUrl = properties.getProperty("pgyUploadUrl")
ext.pgyBuildDesc = properties.getProperty("pgyLocalBuildDesc")

//钉钉token
ext.dingTalkDebugAccessToken = properties.getProperty("dingTalkDebugAccessToken")


//七牛秘钥
ext.kodoAccessKey = properties.getProperty("kodoAccessKey")
ext.kodoSecretKey = properties.getProperty("kodoSecretKey")

//分享相关
ext.qqId = properties.getProperty("qqId")
ext.wxId = properties.getProperty("wxId")
ext.wxSecret = properties.getProperty("wxSecret")
ext.sinaId = properties.getProperty("sinaId")
ext.sinaUrl = properties.getProperty("sinaUrl")
ext.buglyId = properties.getProperty("buglyId")


//同步android机代理任务
task syncAndroidIp(type: Exec) {
    description '设置android端ip代理'
    group 'syncAndroidIp'
    workingDir "$rootProject.projectDir/python"
    commandLine './sync_android_ip.py'
}


task repoAar(type: Exec) {
    description '打包aar'
    group 'syncAndroidIp'
    workingDir "$rootProject.projectDir"
    commandLine 'python3', 'repo_aar.py'
}

