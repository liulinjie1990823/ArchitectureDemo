/**
 * 工程类库共用相关配置
 */

//限制在跟目录导入
if (project.name != project.rootProject.name) {
    return
}

println("Custome Configure configApp.gradle")


subprojects {
    if (it.name == 'app'
            || it.name.startsWith('module-')
            || it.name.startsWith('app-')
    ) {

        if (it.name.startsWith('module-java')) {
            return
        }
        if (useComponent) {
            //使用组件
            if (it.name == 'app') {
                ext.mainApp = true
            } else {
//            ext.alwaysLib = true
            }
            apply from: rootProject.file('gradle/cc-settings-2.gradle')
        } else {
            //不使用组件
            if (it.name == 'app') {
                apply plugin: 'com.android.application'
            } else {
                apply plugin: 'com.android.library'
            }
        }
        //app和module都生成R2文件，因为module要使用R2，切换为application的时候不用替换R2为R
        apply plugin: 'com.jakewharton.butterknife'
        apply plugin: 'kotlin-android'
        apply plugin: 'kotlin-kapt'
        //保存页面字段
        //apply plugin: 'save.state'
//        //方法耗时统计
//        if (useMethodTrace) {
//            apply plugin: "cn.cxzheng.asmtraceman"
//            traceMan {
//                open = true //这里如果设置为false,则会关闭插桩
//                logTraceInfo = false //这里设置为true时可以在log日志里看到所有被插桩的类和方法
//                traceConfigFile = "${project.projectDir}/traceconfig.txt"
//            }
//        }

        android.compileOptions {
            targetCompatibility build_versions.compileJdkVersion
            sourceCompatibility build_versions.compileJdkVersion
        }

        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
                arg("loginOuterKey", "needLogin")
                arg("loginInnerKey", "needLogin")
                arg("serializer", "gson")
            }
        }
        boolean isApplication = it.pluginManager.hasPlugin("com.android.application")
        println("subproject" + "(" + project.name + "):" + "[isApplication:" + isApplication + "]")

        //除了app的其他module
        if (it.name != 'app') {
            android {
                compileSdkVersion build_versions.compileSdkVersion
                buildToolsVersion build_versions.buildToolsVersion

                defaultConfig {
                    if (isApplication) {
                        applicationId build_versions.applicationId
                    }
                    minSdkVersion build_versions.minSdkVersion
                    targetSdkVersion build_versions.targetSdkVersion

                    versionCode build_versions.versionCode
                    versionName build_versions.versionName
                }

                buildTypes {
                    debug {}
                    beta {}
                    release {}
                }
                buildTypes.all { type ->
                    type.matchingFallbacks = ['debug']
                    type.proguardFiles = [getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro']
                }
                lintOptions {
                    abortOnError false
                }
                packagingOptions {
                    exclude 'META-INF/proguard/androidx-annotations.pro'
                    exclude 'META-INF/androidx.core_core.version'
                    exclude 'META-INF/androidx.versionedparcelable_versionedparcelable.version'
                }
            }
        }
        //app模块公用的配置参数
        android {
            defaultConfig {
                ndk { abiFilters "armeabi-v7a" }
//                ndk { abiFilters "armeabi-v7a", "x86" }
                resConfigs "zh", "xxhdpi"

                manifestPlaceholders = [qq_id: qqId]

                if (!useOld) {
                    viewBinding { enabled = true }
                }
            }

        }


        dependencies {
            implementation fileTree(include: ['*.jar'], dir: 'libs')
            implementation project(':application')
            api project(':component-service')

            if (useMaven) {
            } else {
                //dagger
                kapt deps.dagger_compiler
                kapt deps.dagger_android_compiler
                //lifecycle
                kapt deps.lifecycle_compiler
                //db
                kapt deps.room_compiler
                //butterknife
                kapt deps.butterknife_compiler
                //跳转路由
                kapt deps.arouter_compiler
                //测试
                kapt project(':lib-component-compiler')
                //本地路由映射表
                kapt project(':lib-jump-compiler')
                //本地mvp映射表
                kapt project(':lib-mvp-compiler')
                implementation project(':lib-mvp-annotation')
            }

        }
    }
}
