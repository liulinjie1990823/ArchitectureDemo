// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'com.github.ben-manes.versions'

buildscript {
    apply from: 'versions.gradle'
    addRepos(repositories)
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath deps.android_gradle_plugin
        classpath deps.kotlin_gradle_plugin
        classpath deps.butterknife_gradle_plugin
        classpath 'com.meituan.android.walle:plugin:1.1.6'

//        classpath 'com.llj:time-gradle-plugin:0.0.1'

        //上传bintray
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

allprojects {
    addRepos(repositories)

    gradle.taskGraph.whenReady {
        tasks.each { task ->
            if (task.name.contains("Test")
                    || task.name.contains("mockableAndroidJar")
                    || task.name.contains("Lint")
                    || task.name.contains("Aidl")
                    || task.name.contains("Ndk")
            ) {
                task.enabled = false
            }
        }
    }
}

configure(subprojects.findAll { it.name != 'app' && it.name != 'time-gradle-plugin' }) {
    apply plugin: 'com.android.library'

    android {
        compileSdkVersion build_versions.compile
        buildToolsVersion build_versions.build_tools

        defaultConfig {
            minSdkVersion build_versions.min_sdk
            targetSdkVersion build_versions.target_sdk
        }

        buildTypes {
            debug {
                minifyEnabled false
                matchingFallbacks = ['debug', 'release']
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
            release {
                minifyEnabled false
                matchingFallbacks = ['debug', 'release']
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
        compileOptions {
            targetCompatibility build_versions.compile_jdk
            sourceCompatibility build_versions.compile_jdk
        }
        lintOptions {
            abortOnError false
        }
    }
}

afterEvaluate {
    println 'lifecycle afterEvaluate'

    tasks.matching {
        it.name.startsWith('dex')
    }.each { dx ->
        if (dx.additionalParameters == null) {
            dx.additionalParameters = []
        }
        dx.additionalParameters += '--set-max-idx-number=48000'
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        kotlinOptions.suppressWarnings = true
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}





beforeEvaluate {
    println 'lifecycle beforeEvaluate'
}
gradle.beforeProject { project ->
    println "lifecycle beforeProject of $project"
}
gradle.afterProject { project, projectState ->
    println "lifecycle afterProject of $project"
}
gradle.projectsLoaded { project ->
    println "lifecycle projectsLoaded of $project"
}
gradle.settingsEvaluated {
    println 'lifecycle settingsEvaluated'
}
gradle.buildStarted {
    println 'lifecycle buildStarted'
}
gradle.buildFinished {
    println 'lifecycle buildFinished'
}
gradle.projectsEvaluated { project ->
    println "lifecycle projectsEvaluated of $project"
}
