// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'com.github.ben-manes.versions'

buildscript {
    //设置ext属性
    apply from: rootProject.file('gradle/init.gradle')
    //依赖项
    apply from: rootProject.file('gradle/configVersions.gradle')
    //工具类
    apply from: rootProject.file('gradle/utils.gradle')
    //
    addRepos(repositories)
    dependencies {
        //方法数检测
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:1.0.2'
        //maven库更新检测
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.28.0'
        //android-plugin插件
        if (useNew) {
            classpath deps.android_gradle_plugin_new
        } else {
            if (useOld) {
                classpath deps.android_gradle_plugin_old
            } else {
                classpath deps.android_gradle_plugin
            }
        }
        //kotlin插件
        classpath deps.kotlin_gradle_plugin
        //butterknife插件
        classpath deps.butterknife_gradle_plugin
        //渠道包插件
        classpath 'com.meituan.android.walle:plugin:1.1.6'
        //上传bintray插件
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        //组件化插件
        classpath 'com.billy.android:cc-register:1.1.2'
        //上传apk插件
        if (useApkUploadPlugin) {
            classpath 'com.llj:plugin-upload:0.0.13'
        }
        //aspectj插件
        if (useAspectjx) {
            classpath 'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.8'
        }
        //asm代码注入插件
        if (useCodeInject) {
            classpath 'com.llj:plugin-code-inject:0.0.1'
        }
        //arr打包上传jcenter插件
        classpath "com.novoda:bintray-release:0.9.2"
        //okbuck编译
        classpath 'com.uber:okbuck:0.49.0'
        //保存页面字段
        //classpath "io.github.prototypez:save-state:0.2.3"
        //doraemonkit手机调试插件
        classpath 'com.didichuxing.doraemonkit:doraemonkit-plugin:3.1.4'
        //方法耗时统计
        if (useMethodTrace) {
            classpath "gradle.plugin.cn.cxzheng.methodTracePlugin:tracemanplugin:1.0.4"
        }
        //排除jar中某个类插件
        classpath "com.github.nekocode:JarFilterPlugin:2.4"
        classpath 'com.github.yanbober:android-build-filter-gradle-plugin:1.0.1'
        classpath 'coder.siy:exclude-dependencies-plugin:1.0.0'
    }
}

allprojects {
    //设置所有工程的依赖仓库
    addRepos(repositories)

    //强制使依赖版本
    configurations.all {
        resolutionStrategy {
            force deps.okhttp
            force deps.gson
            force 'com.blankj:utilcodex:1.28.4'

            force 'androidx.legacy:legacy-support-core-utils:1.0.0'
            force 'androidx.legacy:legacy-support-core-ui:1.0.0'
            force 'androidx.legacy:legacy-support-v4:1.0.0'
            force deps.annotations
            force deps.androidx_core
            force deps.arch_common
            force deps.arch_runtime
            force deps.appcompat
            force deps.lifecycle_runtime
            force deps.lifecycle_service
            force deps.lifecycle_java8
            force deps.lifecycle_viewmodel
            force deps.lifecycle_viewmodel_savedstate
            force deps.lifecycle_livedata
            force deps.activity
            force deps.fragment
            force deps.constraint_layout
            force deps.recyclerview
            force deps.viewpager
            force deps.viewpager2
            force deps.transition
        }
    }

    //过滤每个工程任务表中无用的任务
    gradle.taskGraph.whenReady { taskGraph ->
        taskGraph.allTasks.each { task ->
            if (task.name.contains("Test")
                    || task.name.contains("test")//测试相关
                    || task.name.contains("mockableAndroidJar")//测试相关
                    || task.name.contains("Lint")//lint检测
                    || task.name.contains("lint")
//                    || task.name.contains("Aidl")//编译Aidl文件
//                    || task.name.contains("aidl")
                    || task.name.contains("Ndk")//使用ndk编译c++代码
                    || task.name.contains("ndk")
            ) {
                task.enabled = false
            }
        }
    }

    //略过Javadoc中的编码问题
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                excludes = ['**/*.kt']
                options.addStringOption('Xdoclint:none', '-quiet')
                options.addStringOption('encoding', 'UTF-8')
                options.addStringOption('charSet', 'UTF-8')
            }
        }
    }
}

//配置library相关属性
apply from: rootProject.file('gradle/configLibrary.gradle')
//配置module相关属性
apply from: rootProject.file('gradle/configApp.gradle')


afterEvaluate {

//    tasks.matching {
//        it.name.startsWith('dex')
//    }.each { dx ->
//        if (dx.additionalParameters == null) {
//            dx.additionalParameters = []
//        }
//        dx.additionalParameters += '--set-max-idx-number=48000'
//    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        kotlinOptions.suppressWarnings = true
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

