/**
 * 工程类库共用相关配置
 */

//限制在跟目录导入
if (project.name != project.rootProject.name) {
    return
}

println("Custome Configure (configModule.gradle)-------------------------------------")


subprojects {
    if (it.name == 'app'
            || it.name.startsWith('app-')
            || it.name.startsWith('module-')) {

        if (it.name.startsWith('module-java')) {
            return
        }
        if (useComponent) {
            //使用组件
            if (it.name == 'app') {
                ext.mainApp = true
            }
            if (it.name == 'app-loading') {
                apply plugin: 'com.android.library'
            } else {
                apply from: rootProject.file('z_gradle/cc-settings-3.gradle')
            }
        } else {
            //不使用组件
            if (it.name == 'app') {
                apply plugin: 'com.android.application'
            } else {
                apply plugin: 'com.android.library'
            }
        }
        //kotlin版本lint
        apply from: rootProject.file('z_config/quality/detekt/detekt.gradle')

        //app和module都生成R2文件，因为module要使用R2，切换为application的时候不用替换R2为R
        apply plugin: 'com.jakewharton.butterknife'
        apply plugin: 'kotlin-android'
        apply plugin: 'kotlin-kapt'
        apply plugin: 'kotlin-parcelize'

        apply plugin: 'bga-appinit-plugin'

        if (it.ext.has("mainApp") && it.ext.mainApp == true) {
            apply from: rootProject.file('z_gradle/configApp.gradle')
        }

        if (!useOld) {
            apply from: rootProject.file('z_gradle/novoda-bintray.gradle')
        }


        def isKotlin = it.pluginManager.hasPlugin("kotlin-kapt")
        if (isKotlin) {
            kapt {
                arguments {
                    arg("AROUTER_MODULE_NAME", project.getName())
                    arg("loginOuterKey", "needLogin")
                    arg("loginInnerKey", "needLogin")
                    arg("serializer", "gson")
                }
            }
            android {
                kotlinOptions {
                    jvmTarget = App.compileJdkVersion
                }
            }
        }

        boolean isApplication = it.pluginManager.hasPlugin("com.android.application")
        println("subproject" + "(" + project.name + "):" + "[isApplication:" + isApplication + "]")

        //app模块公用的配置参数
        android {

            compileSdkVersion App.compileSdkVersion
            buildToolsVersion App.buildToolsVersion

            defaultConfig {

                if (isApplication) {
                    applicationId App.applicationId
                }
                minSdkVersion App.minSdkVersion
                targetSdkVersion App.targetSdkVersion

                versionCode App.versionCode
                versionName App.versionName


                ndk { abiFilters "armeabi-v7a", "x86" }
                resConfigs "zh", "xxhdpi"
                //设置工程scheme，如ciw,ybs，在gradle.properties中设置
                resValue("string", "native_scheme", native_scheme)
                manifestPlaceholders = [native_scheme: native_scheme]

                manifestPlaceholders = [qq_id: qqId]

                if (!useOld) {
                    buildFeatures {
                        viewBinding = true
                        dataBinding = true
                    }
                }
            }

            signingConfigs {
                release {
                    storeFile file("../z_keystore/itotemHunbohui.keystore")
                    storePassword "itotem"
                    keyAlias "itotemapp"
                    keyPassword "itotem"
                }
            }
            buildTypes {
                debug {
                    if (isApplication) {
                        minifyEnabled false
                        shrinkResources false
                        signingConfig signingConfigs.release
                    }
                }
                beta {
                    if (isApplication) {
                        minifyEnabled false
                        shrinkResources false
                        signingConfig signingConfigs.release
                    }
                }
                release {
                    debuggable false
                    if (isApplication) {
                        minifyEnabled true
                        shrinkResources true
                        signingConfig signingConfigs.release
                    }
                }
            }
            buildTypes.all { type ->
                type.matchingFallbacks = ['release']
                type.proguardFiles = [getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro']
            }

            lintOptions {
                abortOnError false
                ignoreWarnings true
            }
            packagingOptions {
                exclude 'META-INF/proguard/androidx-annotations.pro'
                exclude 'META-INF/androidx.core_core.version'
                exclude 'META-INF/androidx.versionedparcelable_versionedparcelable.version'

                pickFirst '**/libjsc.so'
                pickFirst '**/libc++_shared.so'
            }

            compileOptions {
                targetCompatibility App.compileJdkVersion
                sourceCompatibility App.compileJdkVersion
            }

        }

        String tempName = it.name

        dependencies {
            implementation fileTree(include: ['*.jar'], dir: 'libs')
            implementation project(':application')


            if (useMaven) {
                api Deps.component_service
//                kapt Deps.component_compiler
                kapt Deps.jump_compiler
                kapt Deps.mvp_annotation

            } else {
                api project(':component-service')
                //测试
//                kapt project(':lib-component-compiler')
                //本地路由映射表
                kapt project(':lib-jump-compiler')
                //本地mvp映射表
                implementation project(':lib-mvp-annotation')
//                kapt project(':lib-mvp-compiler')
            }

            //dagger
            kapt Deps.dagger_compiler
            kapt Deps.dagger_android_compiler
            //lifecycle
            kapt Deps.lifecycle_compiler
            //db
            kapt Deps.room_compiler
            //butterknife
            kapt Deps.butterknife_compiler
            //跳转路由
            kapt Deps.arouter_compiler


            //非app-loading工程需要依赖
            if (tempName != 'app-loading') {
                if (useMaven) {
                    api Deps.app_loading
                } else {
                    api project(':app-loading')
                }
            }

            if (isApplication) {
                apply from: rootProject.file('z_gradle/componentInstall.gradle')
            }
        }
    }
}
