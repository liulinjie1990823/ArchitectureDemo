// load properties
Properties localProperties = new Properties()
Properties properties = new Properties()

File localPropertiesFile = project.parent.file("local.properties")
if (localPropertiesFile.exists()) {
    localProperties.load(localPropertiesFile.newDataInputStream())
}

File projectPropertiesFile = project.file("project.properties")
if (projectPropertiesFile.exists()) {
    properties.load(projectPropertiesFile.newDataInputStream())
}

// read properties
def projectRepo = properties.getProperty("project.repo")

def projectGroupId = properties.getProperty("project.groupId")
def projectArtifactId = properties.getProperty("project.artifactId")
def projectVersionName = properties.getProperty("project.versionName")

def projectName = properties.getProperty("project.name")
def projectPackaging = properties.getProperty("project.packaging")//打包的类型aar或者jar
def projectDescription = properties.getProperty("project.description")
def webSiteUrl = properties.getProperty("project.webSiteUrl") //仓库地址
def issueUrl = properties.getProperty("project.issueTrackerUrl") //问题跟踪地址
def vcsUrl = properties.getProperty("project.vcsUrl") //带有git后缀的仓库地址
def projectLicense = properties.getProperty("project.license") //

def developerId = properties.getProperty("developer.id")
def developerName = properties.getProperty("developer.name")
def developerEmail = properties.getProperty("developer.email")


def javadocName = properties.getProperty("javadoc.name")


def bintrayUserOrg = localProperties.getProperty("bintray.userOrg")
def bintrayApiUser = localProperties.getProperty("bintray.user")
def bintrayApikey = localProperties.getProperty("bintray.apikey")
def isDryRun = properties.getProperty("dryRun") == "true"
def isOverride = properties.getProperty("override") == "false"
def isSign = properties.getProperty("sign") == "false"


if (projectGroupId != null) {

    //https://github.com/novoda/bintray-release
    //用于发布本地或远程自定义仓库，MavenLocal，bintray.com
    //会增加publishing和upload组任务

    //增加publishing组
    //bintrayUpload 往bintray上提交
    //generateMetadataFileForBetaPublication
    //generateMetadataFileForDebugPublication
    //generateMetadataFileForReleasePublication
    //generatePomFileForBetaPublication
    //generatePomFileForDebugPublication
    //generatePomFileForReleasePublication
    //publish
    //publishBetaPublicationToMavenLocal
    //publishDebugPublicationToMavenLocal
    //publishReleasePublicationToMavenLocal
    //publishToMavenLocal 打本地包

    //增加upload组
    //uploadArchives


    //上传bintray.com使用bintrayUpload任务

    // 0.9.2版本在gradle6.0上有bug
    //apply plugin: 'com.novoda.bintray-release'
    //https://github.com/panpf/bintray-publish
    apply plugin: 'com.github.panpf.bintray-publish'


    //定义文档task
    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        //文档
        task androidJavadocs(type: Javadoc) {
            failOnError false
            source = android.sourceSets.main.java.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

            if (project.getPlugins().hasPlugin('com.android.library')) {
                project.android.libraryVariants.all { variant ->
                    if (variant.name == 'release') {
                        owner.classpath += variant.javaCompileProvider.get().classpath
                    }
                }
            }
        }
        //文档
        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            from androidJavadocs.destinationDir
            classifier = 'javadoc'
        }
        //源码
        task androidSourcesJar(type: Jar) {
            from android.sourceSets.main.java.source
            classifier = 'sources'
        }
    } else {
        //文档
        task javadocJar(type: Jar, dependsOn: javadoc) {
            from javadoc.destinationDir
            classifier = 'javadoc'
        }
        //源码
        task sourcesJar(type: Jar, dependsOn: classes) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }
    }

//略过Javadoc中的编码问题
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                failOnError false
                excludes = ['**/*.kt']
                options.addStringOption('Xdoclint:none', '-quiet')
                options.addStringOption('encoding', 'UTF-8')
                options.addStringOption('charSet', 'UTF-8')
            }
        }
    }

    publishing {

        //设置发布仓库
        //https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:repositories
        repositories {
            maven {
                //指定要上传的maven私服仓库
                url = "http://nexus.jiehun.tech/repository/android/"
                //远程的仓库名称，一般url就指定了仓库名称
                name = "hbhNexus"

                //认证用户和密码
                credentials {
                    username 'admin'
                    password 'admin123'
                }
            }

            maven {
                //可以使本地路径
                url = "../repo"
                name = "repoDir"
            }
        }
    }

    //https://github.com/novoda/bintray-release/wiki/Configuration-of-the-publish-closure
    publish {
        repoName = projectRepo

        groupId = projectGroupId
        artifactId = projectArtifactId
        publishVersion = projectVersionName

        desc = projectDescription
        website = webSiteUrl
        repository = vcsUrl
        issueTracker = issueUrl

        userOrg = bintrayUserOrg
        bintrayUser = bintrayApiUser
        bintrayKey = bintrayApikey
        dryRun = isDryRun
        override = isOverride
        override = isSign
    }
    //https://stackoverflow.com/questions/62464873/gradle-downloads-unrequired-dependencies
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}
